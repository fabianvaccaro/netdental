//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDentalWitt.DiagnosticServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiagnosticServices.IDiagnostics")]
    public interface IDiagnostics {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/DoWork", ReplyAction="http://tempuri.org/IDiagnostics/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/DoWork", ReplyAction="http://tempuri.org/IDiagnostics/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagType", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagTypeResponse")]
        bool SetDiagType(string Chari);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagType", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagTypeResponse")]
        System.Threading.Tasks.Task<bool> SetDiagTypeAsync(string Chari);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagUbication", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagUbicationResponse")]
        bool SetDiagUbication(string Bdpar, string Codification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagUbication", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagUbicationResponse")]
        System.Threading.Tasks.Task<bool> SetDiagUbicationAsync(string Bdpar, string Codification);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetExtentionDent", ReplyAction="http://tempuri.org/IDiagnostics/SetExtentionDentResponse")]
        bool SetExtentionDent(string Siz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetExtentionDent", ReplyAction="http://tempuri.org/IDiagnostics/SetExtentionDentResponse")]
        System.Threading.Tasks.Task<bool> SetExtentionDentAsync(string Siz);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagpiece", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagpieceResponse")]
        bool SetDiagpiece(string Defi, string Type, string Ubi, string Ext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiagnostics/SetDiagpiece", ReplyAction="http://tempuri.org/IDiagnostics/SetDiagpieceResponse")]
        System.Threading.Tasks.Task<bool> SetDiagpieceAsync(string Defi, string Type, string Ubi, string Ext);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiagnosticsChannel : CDentalWitt.DiagnosticServices.IDiagnostics, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiagnosticsClient : System.ServiceModel.ClientBase<CDentalWitt.DiagnosticServices.IDiagnostics>, CDentalWitt.DiagnosticServices.IDiagnostics {
        
        public DiagnosticsClient() {
        }
        
        public DiagnosticsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiagnosticsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosticsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiagnosticsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool SetDiagType(string Chari) {
            return base.Channel.SetDiagType(Chari);
        }
        
        public System.Threading.Tasks.Task<bool> SetDiagTypeAsync(string Chari) {
            return base.Channel.SetDiagTypeAsync(Chari);
        }
        
        public bool SetDiagUbication(string Bdpar, string Codification) {
            return base.Channel.SetDiagUbication(Bdpar, Codification);
        }
        
        public System.Threading.Tasks.Task<bool> SetDiagUbicationAsync(string Bdpar, string Codification) {
            return base.Channel.SetDiagUbicationAsync(Bdpar, Codification);
        }
        
        public bool SetExtentionDent(string Siz) {
            return base.Channel.SetExtentionDent(Siz);
        }
        
        public System.Threading.Tasks.Task<bool> SetExtentionDentAsync(string Siz) {
            return base.Channel.SetExtentionDentAsync(Siz);
        }
        
        public bool SetDiagpiece(string Defi, string Type, string Ubi, string Ext) {
            return base.Channel.SetDiagpiece(Defi, Type, Ubi, Ext);
        }
        
        public System.Threading.Tasks.Task<bool> SetDiagpieceAsync(string Defi, string Type, string Ubi, string Ext) {
            return base.Channel.SetDiagpieceAsync(Defi, Type, Ubi, Ext);
        }
    }
}
